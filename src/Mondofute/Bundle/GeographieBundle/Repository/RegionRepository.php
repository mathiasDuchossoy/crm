<?php

namespace Mondofute\Bundle\GeographieBundle\Repository;

/**
 * RegionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RegionRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param $locale
     * @return \Doctrine\ORM\QueryBuilder
     */
    // récupérer les traductioin des regions crm qui sont de la langue locale
    public function getTraductionsRegionsCRMByLocale($locale)
    {

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('ru, r , rt , l, s')
            ->from('MondofuteGeographieBundle:Region', 'r')
//            ->leftJoin( 'Mondofute\Bundle\GeographieBundle\Entity\RegionTraduction' , 'rt' , 'WITH' , 'r.id = rt.region')
//            ->LeftJoin('Mondofute\Bundle\SiteBundle\Entity\Site' , 's' , 'WITH' , 'r.site = s.id')
//            ->LeftJoin('Mondofute\Bundle\LangueBundle\Entity\Langue' , 'l' , 'WITH' , 'rt.langue = l.id')
            ->join('r.traductions', 'rt')
            ->join('r.regionUnifie', 'ru')
            ->join('r.site', 's')
            ->join('rt.langue', 'l')
            ->where("l.code = '$locale'")
//        ->setParameter('code' , $locale)
            ->andWhere('s.crm = :crm')
            ->setParameter('crm', 1)
            ->orderBy('r.id', 'ASC');
//        echo($qb);die;

        return $qb;
//        $qb->leftJoin( 'Mondofute\Bundle\GeographieBundle\Entity\RegionTraduction' , 'rt' , 'WITH' , 'r.id = rt.region')
//            ->LeftJoin('Mondofute\Bundle\SiteBundle\Entity\Site' , 's' , 'WITH' , 'r.site = s.id')
//            ->LeftJoin('Mondofute\Bundle\LangueBundle\Entity\Langue' , 'l' , 'WITH' , 'rt.langue = l.id');
//        $qb->where('l.code = :locale')
//            ->setParameter('locale' , $locale);
//        $qb->andWhere( 's.crm = :crm')
//            ->setParameter('crm' , 1);
//        return $qb->orderBy('r.id' , 'ASC');
    }
}
