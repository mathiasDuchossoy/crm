<?php

namespace Mondofute\Bundle\FournisseurPrestationAnnexeBundle\Repository;

/**
 * FournisseurPrestationAnnexeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FournisseurPrestationAnnexeRepository extends \Doctrine\ORM\EntityRepository
{
<<<<<<< f1b39e459059e1aa99a9a102bcb755abf742a507
    /**
     * @param $locale
     * @return \Doctrine\ORM\QueryBuilder
     */
    // récupérer les traduction des stations crm qui sont de la langue locale
    public function getTraductionsByLocale($locale, $famillePrestationAnnexeId)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('s , st, prestationAnnexe')
            ->from('MondofuteFournisseurPrestationAnnexeBundle:FournisseurPrestationAnnexe', 's')
            ->join('s.traductions', 'st')
            ->join('st.langue', 'l')
            ->where("l.code = '$locale'")
            ->join('s.prestationAnnexe' , 'prestationAnnexe')
        ;
        if(!empty($famillePrestationAnnexeId)){
            $qb
                ->andWhere('prestationAnnexe.famillePrestationAnnexe = :famillePrestationAnnexeId ')
                ->setParameter('famillePrestationAnnexeId' , $famillePrestationAnnexeId)
            ;
        }

//        ->setParameter('code' , $locale)
        $qb->orderBy('s.id', 'ASC');



        return $qb;
    }
||||||| merged common ancestors
=======
    /**
     * @param $locale
     * @return \Doctrine\ORM\QueryBuilder
     */
    // récupérer les traduction des stations crm qui sont de la langue locale
    public function getTraductionsByLocale($locale, $famillePrestationAnnexeId)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('s , st')
            ->from('MondofuteFournisseurPrestationAnnexeBundle:FournisseurPrestationAnnexe', 's')
            ->join('s.traductions', 'st')
            ->join('st.langue', 'l')
            ->where("l.code = '$locale'")
        ;
//        if(!empty($famillePrestationAnnexeId)){
//            $qb
//                ->andWhere('s.famillePrestationAnnexe = :famillePrestationAnnexeId ')
//                ->setParameter('famillePrestationAnnexeId' , $famillePrestationAnnexeId)
//            ;
//        }

//        ->setParameter('code' , $locale)
        $qb->orderBy('s.id', 'ASC');

        return $qb;
    }
>>>>>>> ajout prestationAnnexe dans FournisseurPrestationAnnexe
}
