<?php

namespace Mondofute\Bundle\FournisseurPrestationAnnexeBundle\Repository;

/**
 * FournisseurPrestationAnnexeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FournisseurPrestationAnnexeRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param $locale
     * @return \Doctrine\ORM\QueryBuilder
     */
    // récupérer les traduction des stations crm qui sont de la langue locale
    public function getTraductionsByLocale($locale, $famillePrestationAnnexeId)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('s , st, prestationAnnexe')
            ->from('MondofuteFournisseurPrestationAnnexeBundle:FournisseurPrestationAnnexe', 's')
            ->join('s.traductions', 'st')
            ->join('st.langue', 'l')
            ->where("l.code = '$locale'")
            ->join('s.prestationAnnexe', 'prestationAnnexe');
        if (!empty($famillePrestationAnnexeId)) {
            $qb
                ->andWhere('prestationAnnexe.famillePrestationAnnexe = :famillePrestationAnnexeId ')
                ->setParameter('famillePrestationAnnexeId', $famillePrestationAnnexeId);
        }

//        ->setParameter('code' , $locale)
        $qb->orderBy('s.id', 'ASC');


        return $qb;
    }

    public function getFournisseurPrestationAnnexes($fournisseurId, $locale)
    {
//        ->select('hebergementUnifie.id  hebergementUnifieId, hebergements.id hebergementId, traductions.nom')
        $q = $this->getEntityManager()->createQueryBuilder();
        $q
            ->select('fournisseurPrestationAnnexe.id fournisseurPrestationAnnexeId, traductions.libelle, famillePrestationAnnexe.id famillePrestationAnnexeId, traductionFamilles.libelle familleLibelle')
            ->from('MondofuteFournisseurPrestationAnnexeBundle:FournisseurPrestationAnnexe', 'fournisseurPrestationAnnexe')
            ->join('fournisseurPrestationAnnexe.fournisseur', 'fournisseur')
            ->where('fournisseur.id = :fournisseurId')
            ->setParameter('fournisseurId', $fournisseurId)
            ->join('fournisseurPrestationAnnexe.traductions', 'traductions')
            ->join('traductions.langue', 'langue')
            ->andWhere('langue.code = :locale')
            ->setParameter('locale', $locale)
            ->join('fournisseurPrestationAnnexe.prestationAnnexe', 'prestationAnnexe')
            ->join('prestationAnnexe.famillePrestationAnnexe', 'famillePrestationAnnexe')
            ->join('famillePrestationAnnexe.traductions', 'traductionFamilles')
            ->join('traductionFamilles.langue', 'langueFamille')
            ->andWhere('langueFamille.code = :locale')
            ->orderBy('traductionFamilles.libelle', 'ASC');

        $result = $q->getQuery()->getResult();

        return $result;
    }

    public function findByFamillePrestationAnnexe($idFournisseur, $idFamillePrestationAnnexe, $locale)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('fpa')
            ->from('MondofuteFournisseurPrestationAnnexeBundle:FournisseurPrestationAnnexe', 'fpa')
            ->join('fpa.fournisseur', 'f')
            ->where('f.id = :fournisseurId')
            ->setParameter('fournisseurId', $idFournisseur)
            ->join('fpa.traductions', 'trad')
            ->join('trad.langue', 'langue')
            ->andWhere('langue.code = :locale')
            ->setParameter('locale', $locale)
            ->join('fpa.prestationAnnexe', 'pa')
            ->join('pa.famillePrestationAnnexe', 'famillepa')
            ->andWhere('famillepa.id = :famillePrestationAnnexeId')
            ->setParameter('famillePrestationAnnexeId', $idFamillePrestationAnnexe)
            ->orderBy('trad.libelle', 'ASC');
//        dump($qb->getQuery());
        return $qb->getQuery()->getResult();
    }
}
