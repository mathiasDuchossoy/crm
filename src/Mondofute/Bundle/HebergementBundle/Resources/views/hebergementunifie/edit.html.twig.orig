{% extends '@MondofuteHebergement/hebergementunifie/fiche.html.twig' %}


{% block title %}
    {{ 'modification de l\'hébergement ' | capitalize }}
{% endblock %}

{#  GESTION DU TITRE A AFFICHER DANS LA PAGE #}
{% block titre %}
    Modification de l'hébergement
{% endblock %}

{% block body %}
    {% set ongletHebergementStocks = 1 %}
    {{ parent() }}
{% endblock %}
{#  BLOCK DES ACTIONS AUTRES QUE LA MISE A JOUR#}
{% block actions %}
    <div style="text-align: right">
        <ul class="list-unstyled">
            <li><a href="{{ path('hebergement_hebergement_index') }}">{{ 'retour.liste' | trans | capitalize }}</a></li>
            <li>{{ form(delete_form) }}</li>
        </ul>

    </div>

{% endblock %}

{#  GESTION DU BLOCK CONTENANT LE JAVASCRIPT#}
{% block javascripts %}
    <script type="text/javascript">
        "use strict";
        var langue = {
            'enregistrer': {
                'stock': "{{ 'enregistrer.stock' | trans }}",
                'stock_ok': "{{ 'enregistrement_stock.ok'|trans }}",
                'stock_pas_ok': "{{ 'enregistrement_stock.pas_ok'|trans }}",
                'stock_aucun': "{{ 'enregistrement_stock.aucun'|trans }}",
            }
        };
        var stocksModifies = Array();
        var urls = {
            'logementChargerLocatif': "{{ path('logement_charger_locatif') }}",
            'periodeHebergementStocks': "{{ path('periode_type_periode_liste') }}",
            'hebergementChargerHebergementFournisseur': "{{ path('hebergement_charger_hebergement_fournisseur', {'idHebergementUnifie': '_idHebergement_'}) }}",
            'catalogueEnregistrerStockLocatif': "{{ path('mondofute_catalogue_enregistrer_stock_locatif') }}",
            'periodeTypePeriodeOnglets': "{{ path('periode_type_periode_onglets') }}",
        };
        var datatableLangue = {
            language: {
                processing: "{{ 'processing'|trans }}",
                search: "{{ 'rechercher'|trans }} :",
                loadingRecords: "{{ 'chargementEnCours'|trans }}...",
                "lengthMenu": "{{ 'afficher'|trans }} _MENU_ {{ 'resultats'|trans }}",
                zeroRecords: "{{ 'zeroResultats'|trans }}",
                emptyTable: "{{ 'tableVide'|trans }}",
                "paginate": {
                    "first": "{{ 'page.premiere'|trans }}",
                    "last": "{{ 'page.derniere'|trans }}",
                    "next": "{{ 'page.suivante'|trans }}",
                    "previous": "{{ 'page.precedente'|trans }}"
                },
                aria: {
                    sortAscending: ": activer pour trier la colonne par ordre croissant",
                    sortDescending: ": activer pour trier la colonne par ordre décroissant"
                }
            }
        };
    </script>
    {{ parent() }}
    {% javascripts
    'js/datatables.min.js'
    'js/form.min.js'
    'js/hebergement-edit.min.js'
    'js/datatables.min.js' %}
    <script src="{{ asset_url }}"></script>
    {% endjavascripts %}
    <script type="text/javascript">
        $(document).ready(function () {
//            transforme le button submit en bouton de type button
            chargerOngletStocksHebergement({{ entity.id }});

        });
    </script>
    <script type="text/javascript">
        $(document).ready(function () {
            $('[name="btnEnregistrerStocks"]').on('click',enregistrerStocks);
            chargerOngletStocks({{ entity.id }});
        });
<<<<<<< HEAD
        function chargerOngletStocks(idhebergement){
||||||| parent of dba17c9... modif progressBar
        //        copie le premier stock du logement dans le tableau sur les autres stocks
        function dupliquerStocksLogement(logementId) {
            var valeur = $('input[data-logement=' + logementId + ']:first').val();
            $('input[data-logement=' + logementId + ']').each(function () {
                $(this).val(valeur);
            });
        }
        function chargerTableauStocks(table, parametres,$progressBar) {
            var logements = Array();
            logements['logements'] = Array();
            for (var i = 0; i < parametres.logements.length; i++) {
                logements['logements'][i] = parametres.logements[i].id;
            }
            ajouterLogementLocatifTableau(table, logements, parametres,$progressBar);
        }
        function ajouterLogementLocatifTableau(table, logements, parametres,$progressBar) {
            $.post(
                    "{{ path('logement_charger_locatif') }}",
                    {'logements[]': logements['logements']},
                    function (datas) {
                        var donnees = Array();
                        var data = null;
                        for (var iDatas = 0; iDatas < datas['logements'].length; iDatas++) {
                            donnees[iDatas] = Array();
                            data = datas['logements'][iDatas];
                            donnees[iDatas]['logement'] = data.nom + ' <span data-logement_id="' + data.logementUnifie.id + '" class="duplique-stocks glyphicon glyphicon-play"></span>';
                            var attribut = null;
                            for (var i = 0; i < data.periodes.length; i++) {

                                if (data.periodes[i].type.id == parametres.typePeriode.id) {
                                    attribut = 'periode' + data.periodes[i].id;
                                    donnees[iDatas][attribut] = genererInputStock(data.logementUnifie.id, data.periodes[i].id, data.periodes[i].stock);
                                }
                            }
                            chargerProgressBar($progressBar,(parseFloat($progressBar.attr('aria-valuenow'))+parametres.pasProgressBar));
                            if($progressBar.attr('aria-valuenow')==100){
                                $progressBar.closest('.progress').remove();
                            }
                        }
                        table.rows.add(donnees).draw();
                        if (datas['suivant'] != null) {
                            var i = 0;
                            while (i < logements['logements'].length && logements['logements'][i] != datas['suivant']) {
                                i++;
                            }
                            var indice = i;
                            var newLogements = Array();
                            newLogements['logements'] = Array();
                            for (indice = i; indice < logements['logements'].length; indice++) {
                                newLogements['logements'].push(logements['logements'][indice]);
                            }
                            ajouterLogementLocatifTableau(table, newLogements, parametres, $progressBar);
                        }

                    }, 'json'
            );
        }
        function chargerOngletStocksHebergement(idHebergement) {
//            récupération de la progress-bar à gérer lors de l'ajout des onglets TypePeriode
            var $progressBar = $('#progress-bar_onglets_type_periode_hebergement_' + idHebergement);
            var $conteneur = $('#data_hebergement_stocks');
            $.post("{{ path('periode_type_periode_liste') }}",
                    function (typePeriodes) {
                        chargerProgressBar($progressBar, 50);
                        construireOngletsTypePeriodes($conteneur, $progressBar, function () {

                            var idTypePeriode = null;

                            chargerFournisseurHebergements(idHebergement, typePeriodes, function (data, idHebergement, typePeriodes) {
                                for (var i = 0; i < typePeriodes.length; i++) {
                                    if (typePeriodes[i].periodes.length > 0) {
                                        idTypePeriode = typePeriodes[i].id;
                                        $progressBar = $('#' + $conteneur.attr('id') + '_progress-bar_type_periode_' + typePeriodes[i].id);

//                                            alert(data.length);
                                        var colonnes = [{'mDataProp': "logement", title: 'logement'}];
                                        var debut = null;
                                        var fin = null;
                                        var moisDebut = null;
                                        var jourDebut = null;
                                        var moisFin = null;
                                        var jourFin = null;
                                        var attribut = null;
                                        var stock = null;
                                        for (var k = 0; k < typePeriodes[i].periodes.length; k++) {
                                            debut = new Date(typePeriodes[i].periodes[k].debut.date);
                                            fin = new Date(typePeriodes[i].periodes[k].fin.date);
                                            moisDebut = (debut.getMonth() + 1).toString().length > 1 ? (debut.getMonth() + 1) : '0' + (debut.getMonth() + 1);
                                            jourDebut = debut.getDate().toString().length > 1 ? debut.getDate() : '0' + debut.getDate();
                                            moisFin = (fin.getMonth() + 1).toString().length > 1 ? (fin.getMonth() + 1) : '0' + (fin.getMonth() + 1);
                                            jourFin = fin.getDate().toString().length > 1 ? fin.getDate() : '0' + fin.getDate();
                                            attribut = 'periode' + typePeriodes[i].periodes[k].id;
                                            colonnes.push({
                                                mDataProp: attribut,
                                                title: 'du ' + jourDebut + '-' + moisDebut + '-' + debut.getFullYear() + ' au ' + jourFin + '-' + moisFin + '-' + fin.getFullYear()
                                            });
                                        }

                                        var $div = $conteneur.find('#' + $conteneur.attr('id') + '_data_type_periode_' + idTypePeriode + ' .panel-group');
=======
        //        copie le premier stock du logement dans le tableau sur les autres stocks
        function dupliquerStocksLogement(logementId) {
            var valeur = $('input[data-logement=' + logementId + ']:first').val();
            $('input[data-logement=' + logementId + ']').each(function () {
                $(this).val(valeur);
            });
        }
        function chargerTableauStocks(table, parametres,$progressBar) {
            var logements = Array();
            logements['logements'] = Array();
            for (var i = 0; i < parametres.logements.length; i++) {
                logements['logements'][i] = parametres.logements[i].id;
            }
            ajouterLogementLocatifTableau(table, logements, parametres,$progressBar);
        }
        function ajouterLogementLocatifTableau(table, logements, parametres,$progressBar) {
            $.post(
                    "{{ path('logement_charger_locatif') }}",
                    {'logements[]': logements['logements']},
                    function (datas) {
                        var donnees = Array();
                        var data = null;
                        for (var iDatas = 0; iDatas < datas['logements'].length; iDatas++) {
                            donnees[iDatas] = Array();
                            data = datas['logements'][iDatas];
                            donnees[iDatas]['logement'] = data.nom + ' <span data-logement_id="' + data.logementUnifie.id + '" class="duplique-stocks glyphicon glyphicon-play"></span>';
                            var attribut = null;
                            for (var i = 0; i < data.periodes.length; i++) {

                                if (data.periodes[i].type.id == parametres.typePeriode.id) {
                                    attribut = 'periode' + data.periodes[i].id;
                                    donnees[iDatas][attribut] = genererInputStock(data.logementUnifie.id, data.periodes[i].id, data.periodes[i].stock);
                                }
                            }
                            chargerProgressBar($progressBar,(parseFloat($progressBar.attr('aria-valuenow'))+parametres.pasProgressBar));
                            if($progressBar.attr('aria-valuenow')>100){
                                $progressBar.closest('.progress').remove();
                            }
                        }
                        table.rows.add(donnees).draw();
                        if (datas['suivant'] != null) {
                            var i = 0;
                            while (i < logements['logements'].length && logements['logements'][i] != datas['suivant']) {
                                i++;
                            }
                            var indice = i;
                            var newLogements = Array();
                            newLogements['logements'] = Array();
                            for (indice = i; indice < logements['logements'].length; indice++) {
                                newLogements['logements'].push(logements['logements'][indice]);
                            }
                            ajouterLogementLocatifTableau(table, newLogements, parametres, $progressBar);
                        }

                    }, 'json'
            );
        }
        function chargerOngletStocksHebergement(idHebergement) {
//            récupération de la progress-bar à gérer lors de l'ajout des onglets TypePeriode
            var $progressBar = $('#progress-bar_onglets_type_periode_hebergement_' + idHebergement);
            var $conteneur = $('#data_hebergement_stocks');
            $.post("{{ path('periode_type_periode_liste') }}",
                    function (typePeriodes) {
                        chargerProgressBar($progressBar, 50);
                        construireOngletsTypePeriodes($conteneur, $progressBar, function () {

                            var idTypePeriode = null;

                            chargerFournisseurHebergements(idHebergement, typePeriodes, function (data, idHebergement, typePeriodes) {
                                for (var i = 0; i < typePeriodes.length; i++) {
                                    if (typePeriodes[i].periodes.length > 0) {
                                        idTypePeriode = typePeriodes[i].id;
                                        $progressBar = $('#' + $conteneur.attr('id') + '_progress-bar_type_periode_' + typePeriodes[i].id);

//                                            alert(data.length);
                                        var colonnes = [{'mDataProp': "logement", title: 'logement'}];
                                        var debut = null;
                                        var fin = null;
                                        var moisDebut = null;
                                        var jourDebut = null;
                                        var moisFin = null;
                                        var jourFin = null;
                                        var attribut = null;
                                        var stock = null;
                                        for (var k = 0; k < typePeriodes[i].periodes.length; k++) {
                                            debut = new Date(typePeriodes[i].periodes[k].debut.date);
                                            fin = new Date(typePeriodes[i].periodes[k].fin.date);
                                            moisDebut = (debut.getMonth() + 1).toString().length > 1 ? (debut.getMonth() + 1) : '0' + (debut.getMonth() + 1);
                                            jourDebut = debut.getDate().toString().length > 1 ? debut.getDate() : '0' + debut.getDate();
                                            moisFin = (fin.getMonth() + 1).toString().length > 1 ? (fin.getMonth() + 1) : '0' + (fin.getMonth() + 1);
                                            jourFin = fin.getDate().toString().length > 1 ? fin.getDate() : '0' + fin.getDate();
                                            attribut = 'periode' + typePeriodes[i].periodes[k].id;
                                            colonnes.push({
                                                mDataProp: attribut,
                                                title: 'du ' + jourDebut + '-' + moisDebut + '-' + debut.getFullYear() + ' au ' + jourFin + '-' + moisFin + '-' + fin.getFullYear()
                                            });
                                        }

                                        var $div = $conteneur.find('#' + $conteneur.attr('id') + '_data_type_periode_' + idTypePeriode + ' .panel-group');
>>>>>>> dba17c9... modif progressBar

        }
        function enregistrerStocks() {
            var $element = $(this).parent();
            $element.find('[name="btnEnregistrerStocksReponse"]').html('<div class="alert"><div class="progress"><div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width:100%">Enregistrement en cours</div></div></div>');
            var $stocks = $('.table-hebergement-stocks [name^="stocks"]');
//            lance la requête ajax de recherche des fournisseurs de type hébergement
            $.ajax({
                url: "{{ path('mondofute_catalogue_enregistrer_stock_locatif') }}",
                type: 'POST',
                data: $stocks,
                success: function (json){
                    if(json.valid){
                        $element.find('[name="btnEnregistrerStocksReponse"]').html('<div class="alert alert-success">{{ 'enregistrement_stock.ok'|trans }}</div>');
                    }else{
                        $element.find('[name="btnEnregistrerStocksReponse"]').html('<div class="alert alert-danger">{{ 'enregistrement_stock.pas_ok'|trans }}</div>');
                    }
                }
            });
        }
    </script>
{% endblock %}
{% block stylesheets %}
    {{ parent() }}
    {% stylesheets 'css/datatables.css'
    'css/hebergement-edit.min.css' %}
    <link rel="stylesheet" href="{{ asset_url }}"/>
    {% endstylesheets %}
{% endblock %}
