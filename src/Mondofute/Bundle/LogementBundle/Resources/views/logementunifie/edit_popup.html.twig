{% extends '@MondofuteLogement/logementunifie/fiche_popup.html.twig' %}


{% block title %}
    {{ 'logement.modification' | trans | capitalize }}
{% endblock %}

{#  GESTION DU TITRE A AFFICHER DANS LA PAGE #}
{% block titre %}
    {{ 'logement.modification' | trans | capitalize }}
{% endblock %}

{% block formulaire %}
    <ul class="list-unstyled">
        <li><a class="btn btn-default"
               href="{{ path('popup_logement_logement_clone',{'id': form.vars.value.id}) }}">{{ 'dupliquer' | trans }}</a>
        </li>
    </ul>

    {% set ongletLogementLocatifTarifs=1 %}
    {{ parent() }}
{% endblock %}
{#  BLOCK DES ACTIONS AUTRES QUE LA MISE A JOUR#}
{% block actions %}
    <div style="text-align: right">
        <ul class="list-unstyled">
            <li>
                <a href="{{ path('popup_logement_logement_index', {'idFournisseurHebergement':fournisseurHebergement.id}) }}">{{ ('retour.liste' | trans) | capitalize }}</a>
            </li>
            <li>{{ form(delete_form) }}</li>
        </ul>

    </div>

{% endblock %}

{#  GESTION DU BLOCK CONTENANT LE JAVASCRIPT#}
{% block javascripts %}
    {{ parent() }}
    {% javascripts
    'js/datatables.min.js' %}
    <script src="{{ asset_url }}"></script>
    {% endjavascripts %}
    <script type="text/javascript">

        $(document).delegate('a[data-toggle="tab"]', 'shown.bs.tab', function (e) {
            $.fn.dataTable.tables({visible: true, api: true}).columns.adjust();
        });
        function genererDataTables($tableau, colonnes, parametres, $progressBar, callback) {
            {#var table = $tableau.DataTable({#}
            {#data: null,#}
            {#"aoColumns": colonnes,#}
            {#"fnCreatedRow": function (nRow, aData, iDataIndex) {#}
            {#//                    $(nRow).find('td').attr('style', 'vertical-align: middle;');#}
            {#},#}
            {#"bAutoWidth": true,#}
            {#aoColumnDefs: [#}
            {#{"bSortable": true, aTargets: [0]},#}
            {#{"bSortable": false, aTargets: ['_all']},#}
            {#],#}
            {#paging: true,#}
            {#info: true,#}
            {#pageLength: 25,#}
            {#scrollX: true,#}
            {#scrollY: false,#}
            {#scrollCollapse: true,#}
            {#fixedColumns: true,#}
            {#language: {#}
            {#processing: "{{ 'processing'|trans }}",#}
            {#search: "{{ 'rechercher'|trans }} :",#}
            {#loadingRecords: "{{ 'chargementEnCours'|trans }}...",#}
            {#"lengthMenu": "{{ 'afficher'|trans }} _MENU_ {{ 'resultats'|trans }}",#}
            {#zeroRecords: "{{ 'zeroResultats'|trans }}",#}
            {#emptyTable: "{{ 'tableVide'|trans }}",#}
            {#"paginate": {#}
            {#"first": "{{ 'page.premiere'|trans }}",#}
            {#"last": "{{ 'page.derniere'|trans }}",#}
            {#"next": "{{ 'page.suivante'|trans }}",#}
            {#"previous": "{{ 'page.precedente'|trans }}"#}
            {#},#}
            {#aria: {#}
            {#sortAscending: ": activer pour trier la colonne par ordre croissant",#}
            {#sortDescending: ": activer pour trier la colonne par ordre décroissant"#}
            {#}#}
            {#}#}
            {#});#}
            var table = $tableau.DataTable({
                columns: colonnes,
                {#paging: true,#}
                info: false,
                aoColumnDefs: [
                    {"bSortable": true, aTargets: [0]},
                    {"bSortable": false, aTargets: ['_all']},
                ],
                {#pageLength: 25,#}
                {#scrollX: true,#}
                {#scrollY: false,#}
                {#scrollCollapse: true,#}
                {#language: {#}
                {#processing: "{{ 'processing'|trans }}",#}
                {#search: "{{ 'rechercher'|trans }} :",#}
                {#loadingRecords: "{{ 'chargementEnCours'|trans }}...",#}
                {#"lengthMenu": "{{ 'afficher'|trans }} _MENU_ {{ 'resultats'|trans }}",#}
                {#zeroRecords: "{{ 'zeroResultats'|trans }}",#}
                {#emptyTable: "{{ 'tableVide'|trans }}",#}
                {#"paginate": {#}
                {#"first": "{{ 'page.premiere'|trans }}",#}
                {#"last": "{{ 'page.derniere'|trans }}",#}
                {#"next": "{{ 'page.suivante'|trans }}",#}
                {#"previous": "{{ 'page.precedente'|trans }}"#}
                {#},#}
                {#aria: {#}
                {#sortAscending: ": activer pour trier la colonne par ordre croissant",#}
                {#sortDescending: ": activer pour trier la colonne par ordre décroissant"#}
                {#}#}
                {#}#}
            });
            if (callback != null) {
                callback(table, parametres, $progressBar);
            }
            return table;
        }
    </script>
    <script type="text/javascript">
        var donnees = Array();
        {% for logement in logementUnifie.logements %}
        {% if logement.site.crm %}
        {% for periode in logement.periodes %}
        if (donnees[{{ periode.periode.type.id }}] == null) {
            donnees[{{ periode.periode.type.id }}] = Array();
        }
        donnees[{{ periode.periode.type.id }}].push({
            'periode': '<span style="display:none;">{{ periode.periode.debut | date('Ymd') }}{{ periode.periode.fin | date('Ymd') }}</span> du {{ periode.periode.debut | date('d-m-Y') }} au {{ periode.periode.fin | date('d-m-Y') }}',
            'prix_public': genererInput('prixPublic',{{ periode.locatif.prixPublic }},{{ periode.periode.id }}),
            'prix_achat': genererInput('prixAchat',{{ periode.locatif.prixPublic }},{{ periode.periode.id }}),
            'stock': genererInput('stock',{{ periode.locatif.stock }},{{ periode.periode.id }}),
        });
        {% endfor %}
        {% endif %}
        {% endfor %}
        function genererInput(name, valeur, idPeriode, length) {

            return '<input class="form-control" name="' + name + '[' + idPeriode + ']" value="' + valeur + '"/>';
        }
        $(document).ready(function () {
            $conteneur = $('#data_logement_locatif_tarifs');
            $.post("{{ path('periode_type_periode_liste') }}",
                    function (typePeriodes) {
                        {#console.log(typePeriodes);#}
                        construireOngletsTypePeriodes($conteneur, null, function () {
                            var idTypePeriode = null;
                            for (var indiceTypePeriode = 0; indiceTypePeriode < typePeriodes.length; indiceTypePeriode++) {
                                idTypePeriode = typePeriodes[indiceTypePeriode].id;
                                if (typePeriodes[indiceTypePeriode].periodes != null) {
                                    var colonnes = [{
                                        'mDataProp': "periode",
                                        title: 'periode',
                                    }];
                                    colonnes.push({'mDataProp': "prix_public", title: 'prix public'});
                                    colonnes.push({'mDataProp': "prix_achat", title: 'prix d\'achat'});
                                    colonnes.push({
                                        'mDataProp': "stock",
                                        title: 'stock'
                                    });
                                    parametres = {
                                        idTypePeriode: idTypePeriode,
                                    };
                                    {#}#}
                                    var $tableau = $('<table class="table-hebergement-stocks table table-striped nowrap" width="100%" id="tarifs-type-periode-' + idTypePeriode + '"></table>');
                                    $('#data_logement_locatif_tarifs').find('#data_logement_locatif_tarifs_data_type_periode_' + idTypePeriode).append($tableau);
                                    var table = genererDataTables($tableau, colonnes, parametres, null, function (table, parametres, $progressBar) {
                                        table.rows.add(donnees[parametres.idTypePeriode]).draw();
                                    });
                                }
                            }
                        });
                    }
            );
        });

        /**
         * permet de construire les onglets TypePeriodes ainsi que les div pour leurs contenus
         * @param $conteneur
         * @param $progressBar
         */
        function construireOngletsTypePeriodes($conteneur, $progressBar, callback) {
            $.post("{{ path('periode_type_periode_onglets') }}",
                    {'idConteneur': $conteneur.attr('id')},
                    function (html) {

                        if ($progressBar != null) {
                            chargerProgressBar($progressBar, 100);
                        }
                        $conteneur.html(html);
                        if (callback != null) {
                            callback(html);
                        }
                    }
            ), 'json';
        }
    </script>

{% endblock %}
