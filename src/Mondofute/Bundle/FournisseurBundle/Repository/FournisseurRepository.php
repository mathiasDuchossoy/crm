<?php

namespace Mondofute\Bundle\FournisseurBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;
use Mondofute\Bundle\FournisseurBundle\Entity\FournisseurContient;

/**
 * FournisseurRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FournisseurRepository extends \Doctrine\ORM\EntityRepository
{
    public function getFournisseurDeFournisseur($fournisseurId = null)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('fournisseur')
            ->from('MondofuteFournisseurBundle:Fournisseur', 'fournisseur')
            ->where("fournisseur.contient = :contient")
            ->setParameter('contient', FournisseurContient::FOURNISSEUR);
        if (!empty($fournisseurId)) {
            $qb->andWhere("fournisseur.id != :id")
//            ->setParameters(array('contient'=> FournisseurContient::FOURNISSEUR , 'id' => $fournisseurId))
                ->setParameter('id', $fournisseurId);
        }
        $qb->orderBy('fournisseur.id', 'ASC');
        return $qb;
    }

    public function rechercherTypeHebergement($enseigne = '')
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('fournisseur')
            ->from('MondofuteFournisseurBundle:Fournisseur', 'fournisseur')
            ->where("fournisseur.contient = :contient")
            ->setParameter('contient', FournisseurContient::PRODUIT)
            ->join('fournisseur.types', 'types')
            ->andWhere('types.id = :typeId')
            ->setParameter('typeId', 9);
        if (!empty($enseigne)) {
            $qb->andWhere("fournisseur.enseigne LIKE :enseigne")
//            ->setParameters(array('contient'=> FournisseurContient::FOURNISSEUR , 'id' => $fournisseurId))
                ->setParameter('enseigne', '%' . $enseigne . '%');
        }
        $qb->orderBy('fournisseur.enseigne', 'ASC');
        return $qb;
    }

    /**
     * @return mixed
     */
    public function countTotal()
    {
        return $this->createQueryBuilder('entity')
            ->select('COUNT(entity)')
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * Get the paginated list of published secteurs
     *
     * @param int $page
     * @param int $maxperpage
     * @param $locale
     * @param array $sortbyArray
     * @param int $site
     * @return Paginator
     */
    public function getList($page = 1, $maxperpage, $locale, $sortbyArray = array(), $site = 1)
    {
        $q = $this->createQueryBuilder('entity')
            ->select('entity')
            ->setFirstResult(($page - 1) * $maxperpage)
            ->setMaxResults($maxperpage);

        foreach ($sortbyArray as $key => $item) {
            $q
                ->orderBy($key, $item);
        }

        return new Paginator($q);
    }

    public function findFournisseurByContient($contient, $fournisseurId = null)
    {

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('fournisseur.id , fournisseur.enseigne')
            ->from('MondofuteFournisseurBundle:Fournisseur', 'fournisseur')
            ->where("fournisseur.contient = :contient")
            ->setParameter('contient', $contient);
        $qb->orderBy('fournisseur.id', 'ASC');

        if (!empty($fournisseurId)) {
            $qb
                ->andWhere('fournisseur.id = :fournisseurId')
                ->setParameter('fournisseurId', $fournisseurId);
        }

        $result = $qb->getQuery()->getResult();
//        dump($result);die;
        return $result;
    }

    public function findWithPrestationAnnexes()
    {
        $q = $this->getEntityManager()->createQueryBuilder();
        $q
            ->select('fournisseur')
            ->from('MondofuteFournisseurBundle:Fournisseur', 'fournisseur')
            ->join('fournisseur.prestationAnnexes', 'prestationAnnexes');

        $result = $q->getQuery()->getResult();
//        dump($result);die;
        return $result;
    }

    public function findByFamillePrestationAnnexe($famillePrestationAnnexeId)
    {
        $q = $this->getEntityManager()->createQueryBuilder();
        $q->select('fournisseur')
            ->from('MondofuteFournisseurBundle:Fournisseur', 'fournisseur')
            ->join('fournisseur.types', 'types')
            ->where('types.id = :famillePrestationAnnexeId')
            ->setParameter('famillePrestationAnnexeId', $famillePrestationAnnexeId);

        $result = $q->getQuery()->getResult();
        return $result;
    }

    public function findByNotTypeHebergement()
    {
        $q = $this->getEntityManager()->createQuery('SELECT fournisseur FROM MondofuteFournisseurBundle:Fournisseur fournisseur WHERE fournisseur.id NOT IN (
                SELECT fournisseur2 FROM MondofuteFournisseurBundle:Fournisseur fournisseur2 LEFT JOIN fournisseur2.types types WHERE types.id = 9)');

        $result = $q->getResult();
        return $result;
    }

    public function findFournisseurForPrestationAnnexeExterne($dateDebut, $dateFin, $stationId, $typeId)
    {
        $q = $this->getEntityManager()->createQueryBuilder();
        $q->select('f')
            ->from('MondofuteFournisseurBundle:Fournisseur', 'f')
            ->join('f.types', 'types')
            ->join('f.prestationAnnexes', 'prestationAnnexes')
            ->join('prestationAnnexes.params', 'params')
            ->join('params.prestationAnnexeStations', 'prestationAnnexeStations')
            ->join('prestationAnnexeStations.station', 'station')
            ->where('types.id = :typesId')
            ->andWhere('f.id NOT IN (SELECT fournisseur.id FROM MondofuteFournisseurBundle:Fournisseur fournisseur 
            LEFT JOIN fournisseur.types types2
            WHERE types2.id = 9 )')
            ->andWhere('station.id = :stationId');

        $q->setParameters([
            'typesId' => $typeId,
            'stationId' => $stationId
        ]);

        $result = $q->getQuery()->getResult();
//        dump($result);die;
        return $result;
    }

}
