<?php

namespace Mondofute\Bundle\CatalogueBundle\Repository;

use DateTime;
use Doctrine\ORM\EntityManager;

/**
 * LogementPeriodeLocatifRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LogementPeriodeLocatifRepository extends \Doctrine\ORM\EntityRepository
{
    public function deleteByLogement($logementId)
    {
        $sql = 'DELETE FROM logement_periode_locatif WHERE logement_id = :logementId';
        $params = array(
            'logementId' => $logementId,
        );

        return $this->getEntityManager()->getConnection()->executeQuery($sql, $params);
    }

    public function findByPrixPublicNotEmpty()
    {
        /** @var EntityManager $em */
        $em = $this->getEntityManager();
        $connection = $em->getConnection();

        $sql = 'select p.id periodeId, p.type_id typeId,  p.debut, p.fin from logement_periode_locatif lpl
                left join periode p on p.id = lpl.periode_id
                where lpl.prix_public > 0
                group by periode_id';

        $logementPeriodeLocatifs = $connection->executeQuery($sql)->fetchAll();

        return $logementPeriodeLocatifs;

    }


    public function getForCommandeLigneSejour($logementId)
    {
        $now = new \DateTime();

        $qb = $this->createQueryBuilder('entity')
            ->select('entity')
            ->join('entity.logement', 'logement')
            ->join('entity.periode', 'periode')
            ->where('logement = :logementId')
            ->andWhere('entity.prixPublic > 0')
            ->andWhere('periode.debut >= :now')
            ->setParameters(
                [
                    'logementId' => $logementId,
                    'now' => $now
                ]
            );

        $result = $qb->getQuery()->getResult();
//        dump($result);die;
        return $result;

    }

    public function getByDates($logementId, $dateDebut, $dateFin)
    {
        $now = new \DateTime(date('y-m-d'));

        $qb = $this->createQueryBuilder('entity')
            ->select('entity, periode')
            ->join('entity.logement', 'logement')
            ->join('entity.periode', 'periode')
            ->where('logement = :logementId')
            ->andWhere('entity.prixPublic > 0')
            ->andWhere('periode.debut >= :now')
            ->andWhere('periode.debut <= :dateDebut')
            ->andWhere('periode.fin >= :dateFin')
            ->setParameters(
                [
                    'logementId' => $logementId,
                    'now' => $now,
                    'dateDebut' => new DateTime(date($dateDebut)),
                    'dateFin' => new DateTime(date($dateFin))
                ]
            );

        $result = $qb->getQuery()->getResult();
//        dump($result);die;
        return $result;
    }


}
