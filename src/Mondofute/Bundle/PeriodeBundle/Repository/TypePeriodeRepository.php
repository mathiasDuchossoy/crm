<?php

namespace Mondofute\Bundle\PeriodeBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;
use Mondofute\Bundle\PeriodeBundle\Entity\TypePeriode;

/**
 * TypePeriodeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TypePeriodeRepository extends \Doctrine\ORM\EntityRepository
{
    public function chargerParDates()
    {
        $qb = $this->createQueryBuilder('type_periode_repository');
        $qb->from('MondofutePeriodeBundle:TypePeriode', 'tp')
            ->leftJoin('tp.periodes', 'p')
            ->addOrderBy('type_periode_repository.id', 'ASC')
            ->addOrderBy('p.debut', 'ASC')
            ->addOrderBy('p.fin', 'ASC');
        return $qb->getQuery()->getResult();
    }

    /**
     * @return mixed
     */
    public function countTotalByTypePeriode($typePeriode)
    {
        return $this->createQueryBuilder('entity')
            ->select('COUNT(entity)')
            ->leftJoin('entity.periodes', 'periodes')
            ->where('periodes.id = :typePeriode')
            ->setParameter('typePeriode', $typePeriode)
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * Get the paginated list of published secteurs
     *
     * @param int $page
     * @param int $maxperpage
     * @param array $sortbyArray
     * @return Paginator
     */
    public function getList($page = 1, $maxperpage, $typePeriode, $sortbyArray = array())
    {
//        $qb = $this->createQueryBuilder('type_periode_repository');
//        $qb->from('MondofutePeriodeBundle:TypePeriode', 'tp')
//            ->leftJoin('tp.periodes', 'p')
//            ->where('p.type = :typePeriode')
//            ->setParameter('typePeriode' , $typePeriode)
//            ->addOrderBy('type_periode_repository.id', 'ASC')
//            ->addOrderBy('p.debut', 'ASC')
//            ->addOrderBy('p.fin', 'ASC');

        $q = $this->createQueryBuilder('entity')
            ->select('entity')
            ->leftJoin('entity.periodes', 'periodes')
            ->where('entity.id = :typePeriode')
            ->setParameter('typePeriode', $typePeriode)
            ->setFirstResult(($page - 1) * $maxperpage)
            ->setMaxResults($maxperpage);

        foreach ($sortbyArray as $key => $item) {
            $q
                ->orderBy($key, $item);
        }


        return $q->getQuery()->getSingleResult();
//        return new Paginator($q);
    }
}
