<?php

namespace Mondofute\Bundle\PeriodeBundle\Repository;

use Doctrine\Common\Collections\Criteria;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * PeriodeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PeriodeRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param $debut
     * @param $fin
     * @param null $type
     * @param null $nbJour
     * @return \Doctrine\Common\Collections\Collection
     */
    public function rechercherPeriodesIntervale($debut, $fin, $type = null, $nbJour = null)
    {
        $criteres = new Criteria();
        $criteres->where($criteres->expr()->gte('debut', $debut));
        $criteres->andWhere($criteres->expr()->lte('fin', $fin));
        if (!empty($type)) {
            $criteres->andWhere($criteres->expr()->eq('type', $type));
        }
        if (!empty($nbJour)) {
            $criteres->andWhere($criteres->expr()->eq('nbJour', $nbJour));
        }
        return $this->matching($criteres);
    }

    /**
     * @return mixed
     */
    public function countTotalByTypePeriode($typePeriode)
    {
        return $this->createQueryBuilder('entity')
            ->select('COUNT(entity)')
            ->where('entity.type = :typePeriode')
            ->setParameter('typePeriode', $typePeriode)
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * Get the paginated list of published secteurs
     *
     * @param int $page
     * @param int $maxperpage
     * @param array $sortbyArray
     * @return Paginator
     */
    public function getList($page = 1, $maxperpage, $sortbyArray = array(), $typePeriode = null)
    {
        $q = $this->createQueryBuilder('entity')
            ->select('entity')
            ->where('entity.type = :type')
            ->setParameter('type', $typePeriode)
            ->setFirstResult(($page - 1) * $maxperpage)
            ->setMaxResults($maxperpage);

        $pag = new Paginator($q);
        return $pag;
    }

    public function findPeriodeByLogementPrixNotEmpty($logementId, $periodeId)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $now = new \DateTime();
        $qb
            ->select('periode')
            ->from('MondofutePeriodeBundle:periode', 'periode')
            ->join('periode.logementPeriodeLocatifs', 'logementPeriodeLocatifs')
            ->join('logementPeriodeLocatifs.logement', 'logement')
            ->where('logement.id = :logementId')
            ->setParameter('logementId', $logementId)
            ->andWhere('logementPeriodeLocatifs.prixPublic > 0')
            ->andWhere('periode.debut >= :now')
            ->orWhere('periode.id = :periodeId')
            ->setParameter('periodeId', $periodeId)
            ->setParameter('now', $now->format('Y-m-d'))
            ->orderBy('periode.type', 'ASC')
            ->addOrderBy('periode.debut', 'ASC');

//        dump($qb->getQuery());die;
        return $qb;
    }


}
