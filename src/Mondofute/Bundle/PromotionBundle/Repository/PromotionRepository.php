<?php

namespace Mondofute\Bundle\PromotionBundle\Repository;

/**
 * PromotionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PromotionRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param integer $typeId
     * @return array
     */
    public function findByTypeFournisseur($typeId)
    {
        $q = $this->getEntityManager()->createQueryBuilder();
        $q->select('promotion')
            ->from('MondofutePromotionBundle:Promotion', 'promotion')
            ->join('promotion.typeFournisseurs', 'type')
            ->where('type = :type')
            ->setParameter('type', $typeId);

        $result = $q->getQuery()->getResult();
        return $result;
    }

    /**
     * @param integer $fournisseurId
     * @return array
     */
    public function findByFournisseur($fournisseurId)
    {
        $q = $this->getEntityManager()->createQueryBuilder();
        $q->select('promotion')
            ->from('MondofutePromotionBundle:Promotion', 'promotion')
            ->join('promotion.promotionFournisseurs', 'promotionFournisseurs')
            ->join('promotionFournisseurs.fournisseur', 'fournisseur')
            ->where('fournisseur.id = :fournisseurId')
            ->setParameter('fournisseurId', $fournisseurId);

        $result = $q->getQuery()->getResult();
        return $result;
    }

    public function findByFournisseurAndAffectation($fournisseurId, $type)
    {
        $q = $this->getEntityManager()->createQueryBuilder();
        $q->select('promotion')
            ->from('MondofutePromotionBundle:Promotion', 'promotion')
            ->join('promotion.promotionFournisseurs', 'promotionFournisseurs')
            ->join('promotionFournisseurs.fournisseur', 'fournisseur')
            ->join('promotion.promotionTypeAffectations', 'promotionTypeAffectations')
            ->where('fournisseur.id = :fournisseurId')
            ->setParameter('fournisseurId', $fournisseurId)
            ->andWhere('promotionTypeAffectations.typeAffectation = :type')
            ->setParameter('type', $type);

        $result = $q->getQuery()->getResult();
        return $result;
    }

    public function findByFournisseurAndAffectationAndFamille($fournisseurId, $typeAffectation, $typeId)
    {
        $q = $this->getEntityManager()->createQueryBuilder();
        $q->select('promotion')
            ->from('MondofutePromotionBundle:Promotion', 'promotion')
            ->join('promotion.promotionFamillePrestationAnnexes', 'promotionFamillePrestationAnnexes')
            ->join('promotionFamillePrestationAnnexes.fournisseur', 'fournisseur')
            ->join('promotionFamillePrestationAnnexes.famillePrestationAnnexe', 'famillePrestationAnnexe')
            ->join('promotion.promotionTypeAffectations', 'promotionTypeAffectations')
            ->where('fournisseur.id = :fournisseurId')
            ->setParameter('fournisseurId', $fournisseurId)
            ->andWhere('famillePrestationAnnexe.id = :typeId')
            ->setParameter('typeId', $typeId)
            ->andWhere('promotionTypeAffectations.typeAffectation = :type')
            ->setParameter('type', $typeAffectation);

        $result = $q->getQuery()->getResult();
        return $result;
    }

    public function findByPromotionStations($stationId, $fournsseurId)
    {
        $q = $this->getEntityManager()->createQueryBuilder();
        $q->select('promotion')
            ->from('MondofutePromotionBundle:Promotion', 'promotion')
            ->join('promotion.promotionStations', 'promotionStations')
            ->join('promotionStations.fournisseur', 'fournisseur')
            ->join('promotionStations.station', 'station')
            ->where('fournisseur.id = :fournisseurId')
            ->setParameter('fournisseurId', $fournsseurId)
            ->andWhere('station.id = :stationId')
            ->setParameter('stationId', $stationId);

        $result = $q->getQuery()->getResult();
        return $result;
    }

    public function findByLike($like, $site, $locale)
    {
        $q = $this->createQueryBuilder('promotion')
            ->select('promotion.id, concat(traductions.titre, \' - \', promotion.libelle) text')
            ->join('promotion.traductions', 'traductions')
            ->join('traductions.langue', 'langue')
            ->where('traductions.titre LIKE :val or promotion.libelle LIKE :val')
            ->setParameter('val', '%' . $like . '%')
            ->andWhere('promotion.site = :site')
            ->setParameter('site', $site)
            ->andWhere('langue.code = :code')
            ->setParameter('code', $locale);

        return $q->getQuery()->getResult();
    }
}
