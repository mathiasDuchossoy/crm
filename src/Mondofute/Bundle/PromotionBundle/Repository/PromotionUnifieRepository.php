<?php

namespace Mondofute\Bundle\PromotionBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;
use Mondofute\Bundle\PromotionBundle\Entity\PromotionUnifie;

/**
 * PromotionUnifieRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PromotionUnifieRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @return mixed
     */
    public function countTotal()
    {
        return $this->createQueryBuilder('entity')
            ->select('COUNT(entity)')
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * Get the paginated list of published secteurs
     *
     * @param int $page
     * @param int $maxperpage
     * @param $locale
     * @param array $sortbyArray
     * @param int $site
     * @return Paginator
     */
    public function getList($page = 1, $maxperpage, $locale, $sortbyArray = array(), $site = 1)
    {
        $q = $this->createQueryBuilder('unifie')
            ->select('unifie')
            ->join('unifie.promotions', 'entities')
            ->where('entities.site = :site')
            ->setParameter('site', $site)
            ->setFirstResult(($page - 1) * $maxperpage)
            ->setMaxResults($maxperpage);

        foreach ($sortbyArray as $key => $item) {
            $q
                ->orderBy($key, $item);
        }

        return new Paginator($q);
    }

    /**
     * @param PromotionUnifie $promotionUnifie
     * @return mixed
     */
    public function getPromotionUnifieByCode($promotionUnifie)
    {
        $qb = $this->createQueryBuilder('entity')
            ->select('COUNT(entity)')
            ->where('entity.code = :code')
            ->setParameter('code', $promotionUnifie->getCode());

        if (!empty($promotionUnifie->getId())) {
            $qb
                ->andWhere('entity.id != :promotionUnifieId')
                ->setParameter('promotionUnifieId', $promotionUnifie->getId());
        }

//        $qb
//            ->getQuery()
//            ->getSingleScalarResult()
//        ;

        return $qb->getQuery()->getSingleScalarResult();
    }


}
